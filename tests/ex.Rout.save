
R : Copyright 2004, The R Foundation for Statistical Computing
Version 1.9.0 Patched (2004-04-29), ISBN 3-900051-00-3

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> library(fracdiff)
> 
> .proctime00 <- proc.time()
> 
> set.seed(107)
> options(digits = 5)
> 
> ## 1)
> 
> x1 <-  fracdiff.sim( 5000, ar = .2, ma = -.4, d = .3)
> (fd1 <- fracdiff(x1$series, nar = 1, nma = 1, dtol = 1e-10))
$log.likelihood
[1] -7051.5

$d
[1] 0.26721

$ar
[1] 0.27824

$ma
[1] -0.36951

$covariance.dpq
              d         ar1         ma1
d    0.00059661 -0.00080522 -0.00018971
ar1 -0.00080522  0.00161219  0.00066399
ma1 -0.00018971  0.00066399  0.00054849

$stderror.dpq
[1] 0.024426 0.040152 0.023420

$correlation.dpq
         [,1]     [,2]     [,3]
[1,]  1.00000 -0.82104 -0.33163
[2,] -0.82104  1.00000  0.70610
[3,] -0.33163  0.70610  1.00000

$h
[1] 7.431e-05

$d.tol
[1] 1.0537e-08

$M
[1] 100

$hessian.dpq
          d     ar1     ma1
d   -8251.6 -5875.1  4258.3
ar1 -5875.1 -5420.1  4529.4
ma1  4258.3  4529.4 -5833.6

$length.w
[1] 25014

> 
> fdCOVcomp <-
+     c("h", "covariance.dpq", "stderror.dpq", "correlation.dpq", "hessian.dpq")
> fd1. <- fracdiff.var(x1$series, fd1, h = fd1$h / 2)
> sapply(fd1.[fdCOVcomp], signif, digits = 4)
$h
[1] 3.716e-05

$covariance.dpq
             d        ar1        ma1
d    0.0005966 -0.0008052 -0.0001897
ar1 -0.0008052  0.0016120  0.0006640
ma1 -0.0001897  0.0006640  0.0005485

$stderror.dpq
[1] 0.02443 0.04015 0.02342

$correlation.dpq
        [,1]    [,2]    [,3]
[1,]  1.0000 -0.8210 -0.3316
[2,] -0.8210  1.0000  0.7061
[3,] -0.3316  0.7061  1.0000

$hessian.dpq
        d   ar1   ma1
d   -8252 -5875  4258
ar1 -5875 -5420  4529
ma1  4258  4529 -5834

> fd1u <- fracdiff.var(x1$series, fd1, h = fd1$h * 8)
> sapply(fd1u[fdCOVcomp], signif, digits = 4)
$h
[1] 0.0005945

$covariance.dpq
             d        ar1        ma1
d    0.0005966 -0.0008052 -0.0001897
ar1 -0.0008052  0.0016120  0.0006640
ma1 -0.0001897  0.0006640  0.0005485

$stderror.dpq
[1] 0.02443 0.04015 0.02342

$correlation.dpq
        [,1]    [,2]    [,3]
[1,]  1.0000 -0.8210 -0.3316
[2,] -0.8210  1.0000  0.7061
[3,] -0.3316  0.7061  1.0000

$hessian.dpq
        d   ar1   ma1
d   -8252 -5875  4258
ar1 -5875 -5420  4529
ma1  4258  4529 -5834

> 
> ## 2)
> 
> x2 <-  fracdiff.sim( 2048, ar = .8, ma = -.4, d = .3)# -> NA's and problems
> (fd2 <- fracdiff(x2$series, nar = length(x2$ar), nma = length(x2$ma)))
$log.likelihood
[1] -2924.3

$d
[1] 0.33742

$ar
[1] 0.77097

$ma
[1] -0.38105

$covariance.dpq
              d         ar1         ma1
d    0.00041829 -0.00070784 -0.00006753
ar1 -0.00070784  0.00171283  0.00026929
ma1 -0.00006753  0.00026929  0.00025727

$stderror.dpq
[1] 0.020452 0.041386 0.016040

$correlation.dpq
         [,1]     [,2]     [,3]
[1,]  1.00000 -0.83627 -0.20586
[2,] -0.83627  1.00000  0.40567
[3,] -0.20586  0.40567  1.00000

$h
[1] 3.0823e-05

$d.tol
[1] 0.00012207

$M
[1] 100

$hessian.dpq
          d     ar1     ma1
d   -8557.8 -3810.6  1742.3
ar1 -3810.6 -2395.6  1507.3
ma1  1742.3  1507.3 -5007.4

$length.w
[1] 10254

> 
> fd2. <- fracdiff.var(x2$series, fd2, h = fd2$h / 2)
> sapply(fd2.[fdCOVcomp], signif, digits = 4)
$h
[1] 1.541e-05

$covariance.dpq
             d        ar1        ma1
d    5.473e-05 -9.261e-05 -8.835e-06
ar1 -9.261e-05  6.717e-04  1.700e-04
ma1 -8.835e-06  1.700e-04  2.478e-04

$stderror.dpq
[1] 0.007398 0.025920 0.015740

$correlation.dpq
         [,1]    [,2]     [,3]
[1,]  1.00000 -0.4830 -0.07587
[2,] -0.48300  1.0000  0.41660
[3,] -0.07587  0.4166  1.00000

$hessian.dpq
         d   ar1   ma1
d   -24440 -3811  1742
ar1  -3811 -2396  1507
ma1   1742  1507 -5007

> fd2u <- fracdiff.var(x2$series, fd2, h = fd2$h * 8)
Warning message: 
unable to compute correlation matrix in: switch(temp$info, warning("warning in gamma function"), warning("singular Hessian"),  
> sapply(fd2u[fdCOVcomp], signif, digits = 4)
$h
[1] 0.0002466

$covariance.dpq
             d        ar1       ma1
d   -3.545e-04  6.000e-04 5.724e-05
ar1  6.000e-04 -5.003e-04 5.816e-05
ma1  5.724e-05  5.816e-05 2.371e-04

$stderror.dpq
[1] 0.0000 0.0000 0.0154

$correlation.dpq
     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

$hessian.dpq
        d   ar1   ma1
d   -3347 -3811  1742
ar1 -3811 -2396  1507
ma1  1742  1507 -5007

> 
> ## Last Line:
> cat('Time elapsed: ', proc.time() - .proctime00,'\n')
Time elapsed:  0.47 0.01 0.48 0 0 
> 
